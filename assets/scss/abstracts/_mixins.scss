// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

// media query mixin
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––
// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {
    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {
        // Get the breakpoint value.
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        // Write the media query.
        @media (min-width: $breakpoint-value) {
            @content;
        }

        // If the breakpoint doesn't exist in the map.
    } @else {
        // Log a warning.
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––
// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {
    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {
        // Get the breakpoint value.
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        // Write the media query.
        @media (max-width: ($breakpoint-value - 1)) {
            @content;
        }

        // If the breakpoint doesn't exist in the map.
    } @else {
        // Log a warning.
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––
// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {
    // If both the lower and upper breakpoints exist in the map.
    @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
        // Get the lower and upper breakpoints.
        $lower-breakpoint: map-get($breakpoints, $lower);
        $upper-breakpoint: map-get($breakpoints, $upper);

        // Write the media query.
        @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
            @content;
        }

        // If one or both of the breakpoints don't exist.
    } @else {
        // If lower breakpoint is invalid.
        @if (map-has-key($breakpoints, $lower) == false) {
            // Log a warning.
            @warn 'Your lower breakpoint was invalid: #{$lower}.';
        }

        // If upper breakpoint is invalid.
        @if (map-has-key($breakpoints, $upper) == false) {
            // Log a warning.
            @warn 'Your upper breakpoint was invalid: #{$upper}.';
        }
    }
}

// REM font baseline
@mixin rem-baseline($value: $base) {
    font-size: pxtopercent($value);
}

// row space
@mixin row-space($value) {
    margin-right: -$value;
    margin-left: -$value;
    [class*="cell-"] {
        padding-left: $value;
        padding-right: $value;
    }
}

// input placeholder style
@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
}

// icon font : @include icon-font("\67");
@mixin icon-font($content) {
    font-family: "zealplus" !important;
    font-style: normal;
    font-variant: normal;
    font-weight: normal;
    text-transform: none;
    content: $content;
}

// custom scroll
@mixin custom-scroll($color1: $secondary) {
    &::-webkit-scrollbar {
        width: 10px;
    }
    &::-webkit-scrollbar-track {
        border-radius: 10px;
        -webkit-border-radius: 10px;
        -webkit-box-shadow: inset 0 0 6px rgba($black, 0.3);
    }
    &::-webkit-scrollbar-thumb {
        -webkit-border-radius: 10px;
        border-radius: 10px;
        background: rgba($color1, 0.8);
        -webkit-box-shadow: inset 0 0 6px rgba($black, 0.5);
    }
    &::-webkit-scrollbar-thumb:window-inactive {
        background: $primary;
    }
}

// Container Spacing
@mixin container-space($position: "both", $value: $container-width) {
    @if ($position == "left") {
        padding-left: calc((100% - #{$value}) / 2);
    } @else if($position == "right") {
        padding-right: calc((100% - #{$value}) / 2);
    } @else if($position == "both") {
        padding-left: calc((100% - #{$value}) / 2);
        padding-right: calc((100% - #{$value}) / 2);
    } @else {
        @error 'Wrong input "#{$position}", pleaase use "left" or "right"';
    }
}
