// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

// Media Query mixin
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––
// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {
    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {
        // Get the breakpoint value.
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        // Write the media query.
        @media (min-width: $breakpoint-value) {
            @content;
        }

        // If the breakpoint doesn't exist in the map.
    } @else {
        // Log a warning.
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––
// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {
    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {
        // Get the breakpoint value.
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        // Write the media query.
        @media (max-width: ($breakpoint-value - 1)) {
            @content;
        }

        // If the breakpoint doesn't exist in the map.
    } @else {
        // Log a warning.
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––
// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {
    // If both the lower and upper breakpoints exist in the map.
    @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
        // Get the lower and upper breakpoints.
        $lower-breakpoint: map-get($breakpoints, $lower);
        $upper-breakpoint: map-get($breakpoints, $upper);

        // Write the media query.
        @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
            @content;
        }

        // If one or both of the breakpoints don't exist.
    } @else {
        // If lower breakpoint is invalid.
        @if (map-has-key($breakpoints, $lower) ==false) {
            // Log a warning.
            @warn 'Your lower breakpoint was invalid: #{$lower}.';
        }

        // If upper breakpoint is invalid.
        @if (map-has-key($breakpoints, $upper) ==false) {
            // Log a warning.
            @warn 'Your upper breakpoint was invalid: #{$upper}.';
        }
    }
}

// REM font baseline
@mixin rem-baseline($value: $base) {
    font-size: pxtopercent($value);
}

/* mini laptop resolution 1349 X 662 and 1246 X 681 and 1218 X 672 */
@mixin mini-laptop {
    @media (min-width: 1100px) and (max-height: 800px) {
        @content;
    }
}

// mobile
@mixin mobile {
    @media (max-width: 720px) and (orientation: portrait) {
        @content;
    }

    @media (max-width: 992px) and (orientation: landscape) {
        @content;
    }
}

// portrait
@mixin mobile-portrait {
    @media (max-width: 720px) and (orientation: portrait) {
        @content;
    }
}

// Landscape
@mixin mobile-landscape {
    @media (max-width: 992px) and (orientation: landscape) {
        @content;
    }
}

/* Mozila Firefox */
@mixin firefox {
    @-moz-document url-prefix() {
        @content;
    }
}

// row space
@mixin row-space($value) {
    margin-right: rem(-$value/2);
    margin-left: rem(-$value/2);

    [class*="cell-"] {
        padding-left: rem($value/2);
        padding-right: rem($value/2);
    }
}

// input placeholder style
@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
    }

    &::-moz-placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

// icon font : @include icon("\67");
@mixin icon($content) {
    content: $content;
    font-family: $icon-family;
    font-style: normal;
    font-variant: normal;
    font-weight: normal;
    text-transform: none;
}

// custom scroll
@mixin custom-scroll($color1: $secondary) {
    &::-webkit-scrollbar {
        width: 10px;
    }

    &::-webkit-scrollbar-track {
        border-radius: 10px;
        -webkit-border-radius: 10px;
        --webkit-box-shadow: inset 0 0 6px rgba($black, 0.3);
    }

    &::-webkit-scrollbar-thumb {
        -webkit-border-radius: 10px;
        border-radius: 10px;
        background: rgba($color1, 0.8);
        --webkit-box-shadow: inset 0 0 6px rgba($black, 0.5);
    }

    &::-webkit-scrollbar-thumb:window-inactive {
        background: $primary-100;
    }
}

// Container Spacing
@mixin container-space($position: "", $value: $container-width + $gutters) {
    @if ($position== "left") {
        padding-left: calc((100% - #{$value}) / 2);
        > div {
            padding-left: $gutters / 2;

            @include respond-below(md) {
                padding-left: rem(20px);
            }
        }
    } @else if($position== "right") {
        padding-right: calc((100% - #{$value}) / 2);
        > div {
            padding-right: $gutters / 2;

            @include respond-below(md) {
                padding-right: rem(20px);
            }
        }
    } @else {
        @error 'Wrong input container-space(#{$position}), Please use container-space(left) or container-space(right)';
    }
}

// All heading
@mixin hgroup {
    @for $i from 1 through 6 {
        h#{$i},
        .h#{$i} {
            @content;
        }
    }
}

// Picture Image
@mixin pictureImg($pos: absolute) {
    position: relative;
    picture {
        position: $pos;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: block;
        img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
    }
}
// Img fit
@mixin imgFit($pos: absolute) {
    img {
        position: $pos;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
}
// Flex-center
@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}
